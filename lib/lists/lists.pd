module lists 

import (
    "sort"
)

def Collect[A](a |A|) [A]
    return reduce(a, [], (a, el) => [...a, el])

def New[A](n int, f &() => A) [A]
    return range(0, n)
        then map((el) => f())
        then Collect()

def Filter[A](a [A], f &(&A) => bool) [A]
    (a, idx) = sort.Partition(a, f)
    return shrink(a, idx)

def Map[A](a [A], f &(A) => A) [A]
    return range(0, len(a))
        then reduce(a, (a, i) => a[i = (el) => f(el)])

