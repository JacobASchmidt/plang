module sync 

import (
    "unsafe"
    "runtime"
    "queues"
)

type spinlock Bool 

def (sl spinlock) TryAquire() bool
    return not sk.Set(true)

def (sl spinlock) Release() 
    sl.Set(false)

type crstate union 
    neither ()
    reading ()
    writing ()

type ConcurrentReads[A] struct 
    state          unsafe.State[A]
    waitingReaders Atomic[runtime.WakeList]
    waitingWriters Atomic[runtime.WakeList]
    numWriters     Int 
    numReaders     Int
    crstate        Atomic[crstate]

def (cr ConcurrentReads) wakeWriters()
    

def (cr ConcurrentReads[A]) Read[B](f (&A) => B) B
    state = cr.crstate.Update((state) => 
        cr.numReaing.Inc()
        match state 
            case crstate.niether()
                return crstate.reading()
            case crstate.reading()
                return crstate.reading()
            case crstate.writing()
                cr.waitingReaders.Add(runtime.ThisThread())
                return cr.state.writing()
    )
    
    if state is crstate.writing()
        runtime.Sleep()
    ret = f(cr.state)
    if cr.numReaders.Dec() == 1
        cr.crstate.Update((state) => 
            #someone could have updated in meantime
            if cr.numReaders.Load() != 0
                return crstate.reading()
            if cr.numWriters.Load() != 0
                cr.waiting.Update((writers) => writers.WakeOne())
                return crstate.writing()
            else 
                return crstate.niether()
        )
    return ret


def (cr ConcurrentReads[A]) Update[B](f (A) => A) 
    shouldSleep = unsafe.NewState(false)
    cr.crstate.Update((state) => 
        cr.numWriters.Inc()
        match state 
            case crstate.niether()
                shouldSleep.Set(false)
                return (crstate.writing(), false)
            case crstate.writing()
                shouldSleep.Set(true)
                cr.waitingWriters.Add(runtime.ThisThread())
                return crstate.writing()
            case crstate.reading()
                shouldSleep.Set(true)
                cr.waitingWriters.Add(runtime.ThisThread())
                return (cr.state.reading(), true)
    )

    if shouldSleep.Read()
        runtime.Sleep()
    
    cr.state.Update(f)
    if cr.numWriters.Dec() == 1
        cr.crstate.Update((state) => 
            #someone could have updated in meantime
            if cr.numWriters.Load() != 0
                cr.waitingWriters.WakeOne()
                return crstate.writing()
            if cr.numReaders.Load() != 0
                cr.waitingReaders.Update((readers) => readers.WakeAll())
                return crstate.writing()
            else 
                return crstate.niether()
        )
    else 
        cr.waitingWriters.WakeOne()
