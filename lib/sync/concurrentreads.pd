module sync 

import (
    "unsafe"
    "runtime"
    "queues"
)

type ConcurrentReads[A] struct 
    state          unsafe.State[A]
    waitingReaders Atomic[queues.Queue[runtime.Thread]]
    waitingWriters Atomic[queues.Queue[runtime.Thread]]
    readers        Int

def (cr ConcurrentReads[A]) Read[B](f (&A) => B) B
    if cr.readers.Inc() > 0
        cr.waitingReaders.Add(runtime.ThisThread())
        runtime.Sleep()
    else 
        

