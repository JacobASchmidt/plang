module sync 

import (
    "unsafe"
    "runtime"
    "control"
    "queues"
)

type State[A] struct
    state      unsafe.State[A]
    waiters    Atomic[queues.Queue[runtime.Thread]]
    len        Int

def (s State[A]) wakeNext()
    control.While(
        () => len(s.waiters.Read()) == 0,
        () => () #spin
    )
    s.waiters.Update((q) =>
        (q, thread) = q.Pop()
        return q
    )
    runtime.Wake(thread)

def (s State[A]) Read[B](f (&A) => B) B 
    if s.len.Inc() == 0
        ret = f(s.state.Read())
        if s.len.Dec() != 1
            s.wakeNext()
        return ret
    else 
        s.waiters.Update((q) => q.Add(runtime.ThisThread()))
        runtime.Wait()
        ret = f(s.state.Read())
        if s.len.Dec() != 1 
            s.wakeNext()
        return ret

def (s State[A]) Update(f (A) => A)
    if s.len.Inc() == 0
        s.state.Update(f)
        if s.len.Dec() != 1
            s.wakeNext()
        return
    else 
        s.waiters.Update((q) => q.Add(runtime.ThisThread()))
        runtime.Wait()
        s.state.Update(f)
        if s.len.Dec() != 1 
            s.wakeNext()
        return
