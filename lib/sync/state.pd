module sync 

type Spin[A] struct 
    state unsafe.State[A]
    flag Bool 

type State[A] chan A 

type Signal struct 
    chan ()
    waiters UInt 

def (s Signal) Wait(f &() => bool)
    s.waiters.Inc()
    control.Loop(() => 
        <- s.chan 
        if f()
            s.waiters.Dec()
            return control.Exit()
        return control.Continue()
    )
    s.waiters.Dec()

def (s Signal) SignalAll()
    control.While(
        () => s.Waiters.Read() != 0,  
        () => s.chan <- ()
    )

def (s Signal) SingalOne()
    s.chan <- ()
    # this seems inconsistent with wait, will really have to think about this



def (s State[A]) Update(f (A) => A) State 
    return s <- f(<- s)

def (s State[A]) Read[B](f (&A) => B) B 
    val = <- s 
    ret = f(val)
    s <- val 
    return ret 

