module strings

type Builder struct 
    buf [byte]

def Collect(b |byte|) string 
    return Builder{}.AppendBytes(b).String()

def CollectRunes(r |rune|) string 
    return Builder{}.AppendRunes(r).String()

def (b Builder) AppendByte(b byte) Builder 
    return b{.buf = (buf) => append(buf, b)}

def (b Builder) AppendRune(r rune) Builder 
    return b{.buf = (buf) => utf8.AppendRune(r)}

def (b Builder) AppendBytes(bytes |byte|) Builder 
    return reduce(bytes, b, (b, c) => b.AppendByte(c))

def (b Builder) AppendRunes(runes |rune|) Builder
    return reduce(runes, b, (b, r) => b.AppendRune(r))

def (b Builder) AppendString(s string) Builder 
    return b.Append(bytes(s))

def (b Builder) Bytes() [byte]
    return b.buf

def (b &Builder) View() &[byte]
    return b.buf

def (b Builder) String() string 
    return string(b.buf)

def Find(s string, sub string) maybe[int]
    def builtTable(sub string, table [int], i int, j int) [int]
        if i >= len(sub)
            return table
        if sub[i] == sub[j] 
            return builtTable(sub, table[i = j+1], i + 1, j + 1)
        else 
            if j == 0
                return builtTable(sub, table[i = 0], i + 1, j)
            else 
                return builtTable(sub, table, i, table[j-1])

    def impl(s string, sub string, table &[int], i int, j int) maybe[int]
        if i == len(s)
            return none()
        if s[i] == sub[j]
            if j + 1 == len(sub)
                return some(i - j)
            else 
                return impl(s, sub, table, i + 1, j + 1)
        else 
            if j == 0
                return impl(s, sub, table, i + 1, j)
            else 
                return impl(s, sub, table, i, table[j - 1])


    table = buildTable(sub, lists.New(len(sub), () => 0), 1, 0)
    return impl(s, sub, table, 0, 0)

def FindAll(s string, sub string) |int|
    def builtTable(sub string, table [int], i int, j int) [int]
        if i == len(sub)
            return table
        if sub[i] == sub[j] 
            return builtTable(sub, table[i = j+1], i + 1, j + 1)
        else 
            if j == 0
                return builtTable(sub, table[i = 0], i + 1, j)
            else 
                return builtTable(sub, table, i, table[j-1])

    def impl(s string, sub string, table &[int], i int, j int) |int|
        if i == len(s)
            return ||
        if s[i] == sub[j]
            if j + 1 == len(sub)
                return |i - j, impl(s, sub, table, i, table[j-1])|
            else 
                return impl(s, sub, table, i + 1, j + 1)
        else 
            if j == 0
                return impl(s, sub, table, i + 1, j)
            else 
                return impl(s, sub, table, i, table[j - 1])

    table = buildTable(sub, lists.New(len(sub), () => 0), 1, 0)
    return impl(s, sub, table, 0, 0)

# difference between normal find all is that in split we start over after a match
# e.g. FindAll("ababab", "bab") => |1, 3|
#  but findAll("ababab", "bab") => |1|
def findAllNonOverlap(s string, sub string) |int|
    def builtTable(sub string, table [int], i int, j int) [int]
        if i == len(sub)
            return table
        if sub[i] == sub[j] 
            return builtTable(sub, table[i = j+1], i + 1, j + 1)
        else 
            if j == 0
                return builtTable(sub, table[i = 0], i + 1, j)
            else 
                return builtTable(sub, table, i, table[j-1])

    def impl(s string, sub string, table &[int], i int, j int) |int|
        if i == len(s)
            return ||
        if s[i] == sub[j]
            if j + 1 == len(sub)
                # this line is the only difference
                return |i - j, impl(s, sub, table, i+1, 0)|
            else 
                return impl(s, sub, table, i + 1, j + 1)
        else 
            if j == 0
                return impl(s, sub, table, i + 1, j)
            else 
                return impl(s, sub, table, i, table[j - 1])

    table = buildTable(sub, lists.New(len(sub), () => 0), 1, 0)
    return impl(s, sub, table, 0, 0)

def Split(s string, delim string) |string|
    
    def getEnd(s string, lenDelim int, idxs |int|) |string|
        match idxs
            case |last|
                return |s[last + lenDelim:]|
            case |first, second, ...rest|
                return |s[first + lenDelim: second], getEnd(s, lenDelim, |second, ...rest|)
            case _
                panic("unreachable")
    
    def getSubstrs(s string, lenDelim int, idxs |int|) |string|
        match idx 
            case |first, ...rest|
                return |s[:first], getEnd(s, lenDelim|first, ...rest|)
            case ||
                return s 
            
    delimIdxs = findAllNonOverlap(s, delim)
    return getSubstrs(s, len(delim), delimIdxs)

def StartsWith(s string, sub string) bool 
    return len(sub) <= len(s) and s[:len(sub)] == sub 

def EndsWith(s string, sub string) bool 
    return len(sub) <= len(s) and s[len(s) - len(sub):] == sub 

def Join(s |string|, sep string) string 
    def doRest(s |string|, sep string, b Builder) string 
        match s 
            case |first, ...rest|
                return doRest(s, sep, b.AppendString(sep).AppendString(first))
            case ||
                return b.String()
    match s 
        case |first, ...rest|
            return doRest(rest, sep, Builder{}.AppendString(first))
        case ||
            return ""

def ToUpper(s string) string 
    return runes(s)
        then map((r) => unicode.ToUpper(r))
        then CollectRunes()

def ToLower(s string) string 
    return runes(s)
        then map((r) => unicode.ToLower(r))
        then CollectRunes()
    
def ReplaceN(s string, old string, new string, n int) string 
    def impl(s string, old string, new string, n int, idxs |int|, last int, b Builder) string
        if n == 0
            return b.AppendString(s[last:]).String()
        match idxs
            case |first, ...rest|
                return 
                    impl(s, old, new, n-1, rest, first + len(old), 
                        builder.AppendString(s[last:first]).AppendString(new))
            case ||
                return builder.AppendString(s[last:]).String()
    return impl(s, old, new, n, findAll(s, old), 0, Builder{})
def ReplaceAll(s string, old string, new string) string 
    def impl(s string, old string, new string, idxs |int|, last int, b Builder) string
        match idxs
            case |first, ...rest|
                return 
                    impl(s, old, new, rest, first + len(old), 
                        builder.AppendString(s[last:first]).AppendString(new))
            case ||
                return builder.AppendString(s[last:]).String()
    return impl(s, old, new, findAll(s, old), 0, Builder{})


def Diff(a string, b string)     